specVersion: alpha
kind: YaRD
name: "Traffic Violation"
expressionLang: jshell
inputs:
  - name: "Tickets"
    type: List
elements:
  - name: Incident was ack'd within 3 minutes
    type: Decision
    logic:
      type: LiteralExpression
      expression: |
        `Tickets`.stream().allMatch(t -> TimeUnit.MINUTES.convert(t.reported.getTime() - t.acked.getTime(), TimeUnit.MILLISECONDS) <= 3 );
  - name: Incident was resolved within 5 minutes
    type: Decision
    logic:
      type: LiteralExpression
      expression: |
        `Tickets`.stream().allMatch(t -> TimeUnit.MINUTES.convert(t.reported.getTime() - t.resolved.getTime(), TimeUnit.MILLISECONDS) <= 5 );
  - name: Bronze Level
    type: Decision
    logic:
      type: DecisionTable
      hitPolicy: COLLECT COUNT
      inputs: [ "Incident was ack'd within 3 minutes", "Incident was resolved within 5 minutes" ]
      rules:
        - [ true, '-' ]
        - [ '-', true ]
  - name: Bronze Complete
    type: Decision
    logic:
      type: LiteralExpression
      expression: `Bronze Level` == 2
  - name: Level
    type: Decision
    logic:
      type: DecisionTable
      hitPolicy: ANY
      inputs: [ "Bronze Complete", "Silver Complete", "Gold Complete" ]
      outputComponents: [ "Level" ]
      # To reach the next level, previous one has to be fully completed
      rules:
        - [ true, true,  true,    'Gold' ]
        - [ true, true,  false, 'Silver' ]
        - [ true, false, false, 'Bronze' ]
